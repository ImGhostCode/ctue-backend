generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Favorite {
  id         Int   @id @default(autoincrement())
  userId     Int?
  wordId     Int?
  sentenceId Int?
  User       User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  Sentence Sentence? @relation(fields: [sentenceId], references: [id], onDelete: Cascade)
  Word     Word?     @relation(fields: [wordId], references: [id], onDelete: Cascade)
}

model User {
  id                       Int                       @id @default(autoincrement())
  name                     String?
  avt                      String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  isDeleted                Boolean                   @default(false)
  fcmToken                 String?
  interestTopics           Topic[]
  FavoriteList             Favorite[]
  Notification             Notification[]
  Account                  Account[]
  Contribution             Contribution[]
  Practice                 Practice[]
  PronunciationAssessments PronunciationAssessment[]
  ReviewReminder           ReviewReminder[]
  Sentence                 Sentence[]
  userLearnedWords         UserLearnedWord[]
  UserVocabularyPacks      UserVocabularyPack[]
  CreatedVocabularyPack    VocabularyPack[]
  Word                     Word[]

  @@map("users")
}

model Account {
  email       String   @unique
  userId      Int
  password    String
  authType    String
  accountType String
  isBanned    Boolean  @default(false)
  feedback    String?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model VerifyCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      Int
  createdAt DateTime @default(now())

  @@map("verifyCodes")
}

model Contribution {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  content   Json
  feedback  String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  User      User     @relation(fields: [userId], references: [id])

  @@map("contributions")
}

model Sentence {
  id        Int        @id @default(autoincrement())
  typeId    Int
  userId    Int?
  content   String
  note      String?
  isDeleted Boolean    @default(false)
  meaning   String     @default("")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  Type      Type       @relation(fields: [typeId], references: [id])
  User      User?      @relation(fields: [userId], references: [id])
  Favorite  Favorite[]
  Practice  Practice[] @relation("PracticeToSentence")
  Topic     Topic[]    @relation("SentenceToTopic")

  @@map("sentences")
}

model Word {
  id               Int               @id @default(autoincrement())
  levelId          Int
  specializationId Int
  userId           Int?
  content          String
  note             String?
  phonetic         String?
  examples         String[]
  synonyms         String[]
  antonyms         String[]
  isDeleted        Boolean           @default(false)
  pictures         String[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  meanings         WordMeaning[]
  UserLearnedWords UserLearnedWord[]
  Level            Level             @relation(fields: [levelId], references: [id])
  Specialization   Specialization    @relation(fields: [specializationId], references: [id])
  User             User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  Favorite         Favorite[]
  Practice         Practice[]        @relation("PracticeToWord")
  ReviewReminder   ReviewReminder[]  @relation("ReviewReminderToWord")
  Topic            Topic[]           @relation("TopicToWord")
  Vocabulary       VocabularyPack[]  @relation("VocabularyPackToWord")

  @@map("words")
}

model WordMeaning {
  wordId  Int
  typeId  Int
  meaning String
  Type    Type   @relation(fields: [typeId], references: [id])
  Word    Word   @relation(fields: [wordId], references: [id])

  @@id([wordId, typeId])
}

model Topic {
  id             Int              @id @default(autoincrement())
  name           String
  isWord         Boolean
  image          String
  VocabularyPack VocabularyPack[]
  Practice       Practice[]       @relation("PracticeToTopic")
  Sentence       Sentence[]       @relation("SentenceToTopic")
  Word           Word[]           @relation("TopicToWord")
  User           User[]

  @@map("topics")
}

model Level {
  id       Int        @id @default(autoincrement())
  name     String
  Practice Practice[]
  Word     Word[]

  @@map("levels")
}

model Specialization {
  id             Int              @id @default(autoincrement())
  name           String
  Practice       Practice[]
  VocabularyPack VocabularyPack[]
  Word           Word[]

  @@map("specializations")
}

model Type {
  id       Int           @id @default(autoincrement())
  name     String
  isWord   Boolean
  WordType WordMeaning[]
  Practice Practice[]
  Sentence Sentence[]

  @@map("types")
}

model IrregularVerb {
  id        Int      @id @default(autoincrement())
  v1        String
  v2        String
  v3        String
  isDeleted Boolean  @default(false)
  meaning   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("irregularVerbs")
}

model Practice {
  id                Int             @id @default(autoincrement())
  userId            Int
  levelId           Int?
  numOfSentence     Int
  specializationId  Int?
  typeId            Int?
  createdAt         DateTime        @default(now())
  nRight            Int
  nWrong            Int
  nRightConsecutive Int
  Level             Level?          @relation(fields: [levelId], references: [id])
  Specialization    Specialization? @relation(fields: [specializationId], references: [id])
  Type              Type?           @relation(fields: [typeId], references: [id])
  User              User            @relation(fields: [userId], references: [id])
  Sentences         Sentence[]      @relation("PracticeToSentence")
  Topic             Topic[]         @relation("PracticeToTopic")
  Words             Word[]          @relation("PracticeToWord")

  @@map("practices")
}

model PronunciationAssessment {
  id                 Int                 @id @default(autoincrement())
  userId             Int?
  label              String
  score              Int
  createdAt          DateTime            @default(now())
  phonemeAssessments PhonemeAssessment[]
  User               User?               @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("pronunciationAssessments")
}

model PhonemeAssessment {
  id                        Int                     @id @default(autoincrement())
  label                     String
  score                     Int
  pronunciationAssessmentId Int
  PronunciationAssessment   PronunciationAssessment @relation(fields: [pronunciationAssessmentId], references: [id])

  @@map("phonemeAssessments")
}

model UserLearnedWord {
  userId                             Int
  wordId                             Int
  memoryLevel                        Int
  createdAt                          DateTime            @default(now())
  updatedAt                          DateTime            @updatedAt
  isDeleted                          Boolean             @default(false)
  userVocabularyPackUserId           Int?
  userVocabularyPackVocabularyPackId Int?
  vocabularyPackId                   Int                 @default(1)
  User                               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserVocabularyPack                 UserVocabularyPack? @relation(fields: [userVocabularyPackUserId, userVocabularyPackVocabularyPackId], references: [userId, vocabularyPackId])
  VocabularyPack                     VocabularyPack      @relation(fields: [vocabularyPackId], references: [id])
  Word                               Word                @relation(fields: [wordId], references: [id])

  @@id([userId, wordId, vocabularyPackId])
  @@map("userLearnedWords")
}

model VocabularyPack {
  id                  Int                  @id @default(autoincrement())
  userId              Int
  isPublic            Boolean              @default(false)
  createdAt           DateTime             @default(now())
  isDeleted           Boolean              @default(false)
  title               String
  picture             String?
  specId              Int?
  topicId             Int?
  downloads           Int                  @default(0)
  updatedAt           DateTime             @default(now()) @updatedAt
  ReviewReminder      ReviewReminder[]
  UserLearnedWord     UserLearnedWord[]
  UserVocabularyPacks UserVocabularyPack[]
  Specialization      Specialization?      @relation(fields: [specId], references: [id])
  Topic               Topic?               @relation(fields: [topicId], references: [id])
  User                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  words               Word[]               @relation("VocabularyPackToWord")

  @@map("vocabularyPacks")
}

model UserVocabularyPack {
  userId           Int
  vocabularyPackId Int
  createdAt        DateTime          @default(now())
  isDeleted        Boolean           @default(false)
  UserLearnedWord  UserLearnedWord[]
  User             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  VocabularyPack   VocabularyPack    @relation(fields: [vocabularyPackId], references: [id], onDelete: Cascade)

  @@id([userId, vocabularyPackId])
  @@unique([userId, vocabularyPackId])
  @@map("userVocabularyPacks")
}

model ReviewReminder {
  id               Int            @id @default(autoincrement())
  isDone           Boolean        @default(false)
  reviewAt         DateTime
  createdAt        DateTime       @default(now())
  userId           Int
  vocabularyPackId Int            @default(1)
  updatedAt        DateTime       @default(now()) @updatedAt
  isDeleted        Boolean        @default(false)
  User             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  VocabularyPack   VocabularyPack @relation(fields: [vocabularyPackId], references: [id])
  words            Word[]         @relation("ReviewReminderToWord")

  @@map("reviewReminders")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  body      String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
