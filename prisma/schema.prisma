// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// psql -h localhost -p 5432 -U postgres

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FavoriteItem {
  id Int @id @default(autoincrement())

  userId Int?

  Word     Word[]
  Sentence Sentence[]
  User     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  avt       String?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Account                  Account[]
  Sentence                 Sentence[]
  Word                     Word[]
  FavoriteList             FavoriteItem[]
  Contribution             Contribution[]
  Practice                 Practice[]
  PronunciationAssessments PronunciationAssessment[]
  userLearnedWords         UserLearnedWord[]
  CreatedVocabularySet     VocabularySet[]
  UserVocabularySets       UserVocabularySet[]
  ReviewReminder           ReviewReminder[]

  @@map("users")
}

model Account {
  email String @unique

  userId Int

  password    String
  authType    String
  accountType String
  isBan       Boolean @default(false)
  feedback    String?
  isDeleted   Boolean @default(false)

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model VerifyCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      Int
  createdAt DateTime @default(now())

  @@map("verifyCodes")
}

model Contribution {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  content   Json
  status    Int?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  User User @relation(fields: [userId], references: [id])

  @@map("contributions")
}

model Sentence {
  id        Int     @id @default(autoincrement())
  typeId    Int
  userId    Int?
  content   String
  mean      String
  note      String?
  isDeleted Boolean @default(false)
  Topic     Topic[]

  FavoriteItem FavoriteItem[]
  Practice     Practice[]
  User         User?          @relation(fields: [userId], references: [id])
  Type         Type           @relation(fields: [typeId], references: [id])

  @@map("sentences")
}

model Word {
  id Int @id @default(autoincrement())

  levelId          Int
  specializationId Int
  userId           Int?

  content   String
  note      String?
  meanings  WordMeaning[]
  phonetic  String?
  pictures  String[]
  examples  String[]
  synonyms  String[]
  antonyms  String[]
  isDeleted Boolean       @default(false)

  FavoriteItem     FavoriteItem[]
  Topic            Topic[]
  Practice         Practice[]
  Level            Level             @relation(fields: [levelId], references: [id])
  Specialization   Specialization    @relation(fields: [specializationId], references: [id])
  User             User?             @relation(fields: [userId], references: [id])
  UserLearnedWords UserLearnedWord[]
  Vocabulary       VocabularySet[]
  ReviewReminder   ReviewReminder[]

  @@map("words")
}

model WordMeaning {
  // id      Int    @id @default(autoincrement())
  wordId  Int
  typeId  Int
  meaning String

  Word Word @relation(fields: [wordId], references: [id])
  Type Type @relation(fields: [typeId], references: [id])

  @@id([wordId, typeId])
}

model Topic {
  id     Int     @id @default(autoincrement())
  name   String
  isWord Boolean
  image  String

  Sentence      Sentence[]
  Word          Word[]
  Practice      Practice[]
  VocabularySet VocabularySet[]

  @@map("topics")
}

model Level {
  id   Int    @id @default(autoincrement())
  name String

  Word     Word[]
  Practice Practice[]

  @@map("levels")
}

model Specialization {
  id   Int    @id @default(autoincrement())
  name String

  Word          Word[]
  Practice      Practice[]
  VocabularySet VocabularySet[]

  @@map("specializations")
}

model Type {
  id     Int     @id @default(autoincrement())
  name   String
  isWord Boolean

  Sentence Sentence[]
  Practice Practice[]
  WordType WordMeaning[]

  @@map("types")
}

model IrregularVerb {
  id        Int     @id @default(autoincrement())
  v1        String
  v2        String
  v3        String
  meaning   String
  isDeleted Boolean @default(false)

  @@map("irregularVerbs")
}

model Practice {
  id Int @id @default(autoincrement())

  userId           Int
  typeId           Int?
  levelId          Int?
  specializationId Int?

  nRight            Int
  nWrong            Int
  nRightConsecutive Int
  numOfSentence     Int
  createdAt         DateTime @default(now())

  Words          Word[]
  Sentences      Sentence[]
  Topic          Topic[]
  User           User?           @relation(fields: [userId], references: [id])
  Type           Type?           @relation(fields: [typeId], references: [id])
  Level          Level?          @relation(fields: [levelId], references: [id])
  Specialization Specialization? @relation(fields: [specializationId], references: [id])

  @@map("practices")
}

model PronunciationAssessment {
  id                 Int                 @id @default(autoincrement())
  userId             Int?
  label              String
  score              Int
  phonemeAssessments PhonemeAssessment[]
  createdAt          DateTime            @default(now())

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pronunciationAssessments")
}

model PhonemeAssessment {
  id                        Int    @id @default(autoincrement())
  label                     String
  score                     Int
  pronunciationAssessmentId Int

  PronunciationAssessment PronunciationAssessment? @relation(fields: [pronunciationAssessmentId], references: [id])

  @@map("phonemeAssessments")
}

model UserLearnedWord {
  // id                  Int      @id @default(autoincrement())
  userId              Int
  wordId              Int
  userVocabularySetId Int
  memoryLevel         Int // Thêm trường lưu cấp độ nhớ
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  Word              Word              @relation(fields: [wordId], references: [id])
  User              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserVocabularySet UserVocabularySet @relation(fields: [userVocabularySetId], references: [id])

  @@id([userId, wordId, userVocabularySetId])
  @@map("userLearnedWords")
}

model VocabularySet {
  id        Int      @id @default(autoincrement())
  title     String
  userId    Int
  topicId   Int?
  specId    Int?
  picture   String?
  isPublic  Boolean  @default(false) // Indicates whether the set is public or private
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  downloads Int      @default(0)

  words              Word[]
  Specialization     Specialization?     @relation(fields: [specId], references: [id])
  Topic              Topic?              @relation(fields: [topicId], references: [id])
  User               User                @relation(fields: [userId], references: [id])
  UserVocabularySets UserVocabularySet[]

  @@map("vocabularySets")
}

model UserVocabularySet {
  id              Int      @id @default(autoincrement())
  userId          Int
  vocabularySetId Int
  createdAt       DateTime @default(now())

  User            User              @relation(fields: [userId], references: [id])
  VocabularySet   VocabularySet     @relation(fields: [vocabularySetId], references: [id])
  UserLearnedWord UserLearnedWord[]
  ReviewReminder  ReviewReminder[]

  @@map("userVocabularySets")
}

model ReviewReminder {
  id                  Int      @id @default(autoincrement())
  userVocabularySetId Int
  userId              Int
  isDone              Boolean  @default(false)
  words               Word[]
  reviewAt            DateTime
  createdAt           DateTime @default(now())

  UserVocabularySet UserVocabularySet @relation(fields: [userVocabularySetId], references: [id])
  User              User              @relation(fields: [userId], references: [id])

  @@map("reviewReminders")
}
